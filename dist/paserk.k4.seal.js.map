{"version":3,"file":"paserk.k4.seal.js","sources":["../lib/blakejs/util.js","../lib/blakejs/blake2b.js","../lib/util.js","../lib/chacha.js","../lib/xchacha.js","../lib/paseto.v4.local.js","../lib/ed2curve.js","../lib/paserk.k4.seal.js"],"sourcesContent":["const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\r\n\r\n// For convenience, let people hash a string, not just a Uint8Array\r\nexport function normalizeInput (input) {\r\n    let ret\r\n    if (input instanceof Uint8Array) {\r\n        ret = input\r\n    } else if (typeof input === 'string') {\r\n        const encoder = new TextEncoder()\r\n        ret = encoder.encode(input)\r\n    } else {\r\n        throw new Error(ERROR_MSG_INPUT)\r\n    }\r\n    return ret\r\n}\r\n\r\n// Converts a Uint8Array to a hexadecimal string\r\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\r\nexport function toHex (bytes) {\r\n    return Array.prototype.map\r\n        .call(bytes, function (n) {\r\n            return (n < 16 ? '0' : '') + n.toString(16)\r\n        })\r\n        .join('')\r\n}\r\n\r\n// Converts any value in [0...2^32-1] to an 8-character hex string\r\nfunction uint32ToHex (val) {\r\n    return (0x100000000 + val).toString(16).substring(1)\r\n}\r\n\r\n// For debugging: prints out hash state in the same format as the RFC\r\n// sample computation exactly, so that you can diff\r\nexport function debugPrint (label, arr, size) {\r\n    let msg = '\\n' + label + ' = '\r\n    for (let i = 0; i < arr.length; i += 2) {\r\n        if (size === 32) {\r\n            msg += uint32ToHex(arr[i]).toUpperCase()\r\n            msg += ' '\r\n            msg += uint32ToHex(arr[i + 1]).toUpperCase()\r\n        } else if (size === 64) {\r\n            msg += uint32ToHex(arr[i + 1]).toUpperCase()\r\n            msg += uint32ToHex(arr[i]).toUpperCase()\r\n        } else throw new Error('Invalid size ' + size)\r\n        if (i % 6 === 4) {\r\n            msg += '\\n' + new Array(label.length + 4).join(' ')\r\n        } else if (i < arr.length - 2) {\r\n            msg += ' '\r\n        }\r\n    }\r\n    console.log(msg)\r\n}\r\n\r\n// For performance testing: generates N bytes of input, hashes M times\r\n// Measures and prints MB/second hash performance each time\r\nexport function testSpeed (hashFn, N, M) {\r\n    let startMs = new Date().getTime()\r\n\r\n    const input = new Uint8Array(N)\r\n    for (let i = 0; i < N; i++) {\r\n        input[i] = i % 256\r\n    }\r\n    const genMs = new Date().getTime()\r\n    console.log('Generated random input in ' + (genMs - startMs) + 'ms')\r\n    startMs = genMs\r\n\r\n    for (let i = 0; i < M; i++) {\r\n        const hashHex = hashFn(input)\r\n        const hashMs = new Date().getTime()\r\n        const ms = hashMs - startMs\r\n        startMs = hashMs\r\n        console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\r\n        console.log(\r\n            Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'\r\n        )\r\n    }\r\n}\r\n","// Blake2B in pure Javascript\r\n// Adapted from the reference implementation in RFC7693\r\n// Ported to Javascript by DC - https://github.com/dcposch\r\n\r\nimport * as util from './util.js'\r\n\r\n// 64-bit unsigned addition\r\n// Sets v[a,a+1] += v[b,b+1]\r\n// v should be a Uint32Array\r\nfunction ADD64AA (v, a, b) {\r\n    const o0 = v[a] + v[b]\r\n    let o1 = v[a + 1] + v[b + 1]\r\n    if (o0 >= 0x100000000) {\r\n        o1++\r\n    }\r\n    v[a] = o0\r\n    v[a + 1] = o1\r\n}\r\n\r\n// 64-bit unsigned addition\r\n// Sets v[a,a+1] += b\r\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\r\nfunction ADD64AC (v, a, b0, b1) {\r\n    let o0 = v[a] + b0\r\n    if (b0 < 0) {\r\n        o0 += 0x100000000\r\n    }\r\n    let o1 = v[a + 1] + b1\r\n    if (o0 >= 0x100000000) {\r\n        o1++\r\n    }\r\n    v[a] = o0\r\n    v[a + 1] = o1\r\n}\r\n\r\n// Little-endian byte access\r\nfunction B2B_GET32 (arr, i) {\r\n    return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)\r\n}\r\n\r\n// G Mixing function\r\n// The ROTRs are inlined for speed\r\nfunction B2B_G (a, b, c, d, ix, iy) {\r\n    const x0 = m[ix]\r\n    const x1 = m[ix + 1]\r\n    const y0 = m[iy]\r\n    const y1 = m[iy + 1]\r\n\r\n    ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\r\n    ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\r\n\r\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\r\n    let xor0 = v[d] ^ v[a]\r\n    let xor1 = v[d + 1] ^ v[a + 1]\r\n    v[d] = xor1\r\n    v[d + 1] = xor0\r\n\r\n    ADD64AA(v, c, d)\r\n\r\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\r\n    xor0 = v[b] ^ v[c]\r\n    xor1 = v[b + 1] ^ v[c + 1]\r\n    v[b] = (xor0 >>> 24) ^ (xor1 << 8)\r\n    v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\r\n\r\n    ADD64AA(v, a, b)\r\n    ADD64AC(v, a, y0, y1)\r\n\r\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\r\n    xor0 = v[d] ^ v[a]\r\n    xor1 = v[d + 1] ^ v[a + 1]\r\n    v[d] = (xor0 >>> 16) ^ (xor1 << 16)\r\n    v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\r\n\r\n    ADD64AA(v, c, d)\r\n\r\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\r\n    xor0 = v[b] ^ v[c]\r\n    xor1 = v[b + 1] ^ v[c + 1]\r\n    v[b] = (xor1 >>> 31) ^ (xor0 << 1)\r\n    v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\r\n}\r\n\r\n// Initialization Vector\r\nconst BLAKE2B_IV32 = new Uint32Array([\r\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372,\r\n    0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c,\r\n    0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\r\n])\r\n\r\nconst SIGMA8 = [\r\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13,\r\n    6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1,\r\n    9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4,\r\n    10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5,\r\n    15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7,\r\n    14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2,\r\n    13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0,\r\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6,\r\n    1, 12, 0, 2, 11, 7, 5, 3\r\n]\r\n\r\n// These are offsets into a uint64 buffer.\r\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\r\n// because this is Javascript and we don't have uint64s\r\nconst SIGMA82 = new Uint8Array(\r\n    SIGMA8.map(function (x) {\r\n        return x * 2\r\n    })\r\n)\r\n\r\n// Compression function. 'last' flag indicates last block.\r\n// Note we're representing 16 uint64s as 32 uint32s\r\nconst v = new Uint32Array(32)\r\nconst m = new Uint32Array(32)\r\nfunction blake2bCompress (ctx, last) {\r\n    let i = 0\r\n\r\n    // init work variables\r\n    for (i = 0; i < 16; i++) {\r\n        v[i] = ctx.h[i]\r\n        v[i + 16] = BLAKE2B_IV32[i]\r\n    }\r\n\r\n    // low 64 bits of offset\r\n    v[24] = v[24] ^ ctx.t\r\n    v[25] = v[25] ^ (ctx.t / 0x100000000)\r\n    // high 64 bits not supported, offset may not be higher than 2**53-1\r\n\r\n    // last block flag set ?\r\n    if (last) {\r\n        v[28] = ~v[28]\r\n        v[29] = ~v[29]\r\n    }\r\n\r\n    // get little-endian words\r\n    for (i = 0; i < 32; i++) {\r\n        m[i] = B2B_GET32(ctx.b, 4 * i)\r\n    }\r\n\r\n    // twelve rounds of mixing\r\n    // uncomment the DebugPrint calls to log the computation\r\n    // and match the RFC sample documentation\r\n    // util.debugPrint('          m[16]', m, 64)\r\n    for (i = 0; i < 12; i++) {\r\n        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\r\n        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\r\n        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\r\n        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\r\n        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\r\n        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\r\n        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\r\n        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\r\n        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\r\n    }\r\n    // util.debugPrint('   (i=12) v[16]', v, 64)\r\n\r\n    for (i = 0; i < 16; i++) {\r\n        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\r\n    }\r\n    // util.debugPrint('h[8]', ctx.h, 64)\r\n}\r\n\r\n// reusable parameterBlock\r\nconst parameterBlock = new Uint8Array([\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  0: outlen, keylen, fanout, depth\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  4: leaf length, sequential mode\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  8: node offset\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 12: node offset\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 16: node depth, inner length, rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 20: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 24: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 28: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 32: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 36: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 40: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 44: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 48: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 52: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 56: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0 // 60: personal\r\n])\r\n\r\n// Creates a BLAKE2b hashing context\r\n// Requires an output length between 1 and 64 bytes\r\n// Takes an optional Uint8Array key\r\n// Takes an optinal Uint8Array salt\r\n// Takes an optinal Uint8Array personal\r\nexport function blake2bInit (outlen, key, salt, personal) {\r\n    if (outlen === 0 || outlen > 64) {\r\n        throw new Error('Illegal output length, expected 0 < length <= 64')\r\n    }\r\n    if (key && key.length > 64) {\r\n        throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\r\n    }\r\n    if (salt && salt.length !== 16) {\r\n        throw new Error('Illegal salt, expected Uint8Array with length is 16')\r\n    }\r\n    if (personal && personal.length !== 16) {\r\n        throw new Error('Illegal personal, expected Uint8Array with length is 16')\r\n    }\r\n\r\n    // state, 'param block'\r\n    const ctx = {\r\n        b: new Uint8Array(128),\r\n        h: new Uint32Array(16),\r\n        t: 0, // input count\r\n        c: 0, // pointer within buffer\r\n        outlen: outlen // output length in bytes\r\n    }\r\n\r\n    // initialize parameterBlock before usage\r\n    parameterBlock.fill(0)\r\n    parameterBlock[0] = outlen\r\n    if (key) parameterBlock[1] = key.length\r\n    parameterBlock[2] = 1 // fanout\r\n    parameterBlock[3] = 1 // depth\r\n    if (salt) parameterBlock.set(salt, 32)\r\n    if (personal) parameterBlock.set(personal, 48)\r\n\r\n    // initialize hash state\r\n    for (let i = 0; i < 16; i++) {\r\n        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)\r\n    }\r\n\r\n    // key the hash, if applicable\r\n    if (key) {\r\n        blake2bUpdate(ctx, key)\r\n        // at the end\r\n        ctx.c = 128\r\n    }\r\n\r\n    return ctx\r\n}\r\n\r\n// Updates a BLAKE2b streaming hash\r\n// Requires hash context and Uint8Array (byte array)\r\nexport function blake2bUpdate (ctx, input) {\r\n    for (let i = 0; i < input.length; i++) {\r\n        if (ctx.c === 128) {\r\n            // buffer full ?\r\n            ctx.t += ctx.c // add counters\r\n            blake2bCompress(ctx, false) // compress (not last)\r\n            ctx.c = 0 // counter to zero\r\n        }\r\n        ctx.b[ctx.c++] = input[i]\r\n    }\r\n}\r\n\r\n// Completes a BLAKE2b streaming hash\r\n// Returns a Uint8Array containing the message digest\r\nexport function blake2bFinal (ctx) {\r\n    ctx.t += ctx.c // mark last block offset\r\n\r\n    while (ctx.c < 128) {\r\n        // fill up with zeros\r\n        ctx.b[ctx.c++] = 0\r\n    }\r\n    blake2bCompress(ctx, true) // final block flag = 1\r\n\r\n    // little endian convert and store\r\n    const out = new Uint8Array(ctx.outlen)\r\n    for (let i = 0; i < ctx.outlen; i++) {\r\n        out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\r\n    }\r\n    return out\r\n}\r\n\r\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\r\n//\r\n// Returns a n-byte Uint8Array\r\n//\r\n// Parameters:\r\n// - input - the input bytes, as a string, Buffer or Uint8Array\r\n// - key - optional key Uint8Array, up to 64 bytes\r\n// - outlen - optional output length in bytes, default 64\r\n// - salt - optional salt bytes, string, Buffer or Uint8Array\r\n// - personal - optional personal bytes, string, Buffer or Uint8Array\r\nexport function blake2b (input, key, outlen, salt, personal) {\r\n    // preprocess inputs\r\n    outlen = outlen || 64\r\n    input = util.normalizeInput(input)\r\n    if (salt) {\r\n        salt = util.normalizeInput(salt)\r\n    }\r\n    if (personal) {\r\n        personal = util.normalizeInput(personal)\r\n    }\r\n\r\n    // do the math\r\n    const ctx = blake2bInit(outlen, key, salt, personal)\r\n    blake2bUpdate(ctx, input)\r\n    return blake2bFinal(ctx)\r\n}\r\n","import {timingSafeEqual, randomBytes} from 'crypto'\r\n\r\nconst byteToHex = [];\r\nfor (let n = 0; n <= 0xff; ++n)\r\n{\r\n    const hexOctet = n.toString(16).padStart(2, \"0\");\r\n    byteToHex.push(hexOctet);\r\n}\r\n\r\nconst b64u_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\r\nconst b64u_lookup = new Uint8Array(256);\r\nfor (let i = 0; i < b64u_chars.length; i++) {\r\n    b64u_lookup[b64u_chars.charCodeAt(i)] = i\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} base64\r\n * @param {boolean} as_uint8array\r\n * @returns {string|Uint8Array}\r\n */\r\nexport function b64u_dec(base64, as_uint8array = false) {\r\n    let bufferLength = base64.length * 0.75,\r\n        len = base64.length, i, p = 0,\r\n        encoded1, encoded2, encoded3, encoded4;\r\n\r\n    const bytes = new Uint8Array(bufferLength)\r\n    for (i = 0; i < len; i+=4) {\r\n        encoded1 = b64u_lookup[base64.charCodeAt(i)]\r\n        encoded2 = b64u_lookup[base64.charCodeAt(i+1)]\r\n        encoded3 = b64u_lookup[base64.charCodeAt(i+2)]\r\n        encoded4 = b64u_lookup[base64.charCodeAt(i+3)]\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\r\n    }\r\n    if (as_uint8array) {\r\n        return bytes\r\n    }\r\n    return (new TextDecoder()).decode(bytes)\r\n}\r\n\r\n/**\r\n *\r\n * @ref https://stackoverflow.com/q/12710001\r\n * @param {Uint8Array} bytes\r\n * @returns {string}\r\n */\r\nexport function b64u_enc(bytes) {\r\n    let i, len = bytes.length, base64 = \"\";\r\n    for (i = 0; i < len; i+=3) {\r\n        base64 += b64u_chars[bytes[i] >> 2];\r\n        base64 += b64u_chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += b64u_chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += b64u_chars[bytes[i + 2] & 63];\r\n    }\r\n    if ((len % 3) === 2) {\r\n        return base64.substring(0, base64.length - 1);\r\n    } else if (len % 3 === 1) {\r\n        return base64.substring(0, base64.length - 2);\r\n    }\r\n    return base64\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} mixed\r\n * @returns {string}\r\n */\r\nexport function from_u8(mixed) {\r\n    if (typeof mixed === 'string') {\r\n        return mixed\r\n    } else if (mixed instanceof Uint8Array) {\r\n        return (new TextDecoder()).decode(mixed)\r\n    }\r\n    throw new Error(`Unsupported type: ${typeof mixed}`)\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} hexString\r\n * @returns {Uint8Array}\r\n */\r\nexport function hex_to_u8(hexString) {\r\n    if (hexString.length === 0) {\r\n        return new Uint8Array([])\r\n    }\r\n    if ((hexString.length & 1) === 1) {\r\n        hexString = '0' + hexString\r\n    }\r\n    const buf = new Uint8Array(hexString.length >>> 1)\r\n    for (let i = 0, j = 0; i < hexString.length; i += 2, j++) {\r\n        buf[j] = parseInt(hexString.slice(i, i + 2), 16)\r\n    }\r\n    return buf\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} num\r\n * @returns {Uint8Array}\r\n */\r\nexport function le32(num) {\r\n    needs(Number.isSafeInteger(num), 'Number too large for JavaScript to safely process')\r\n    const low =  (num & 0xffffffff)\r\n    const out = new Uint8Array(4)\r\n    out[0] =  low          & 0xff\r\n    out[1] =  (low >>>  8) & 0xff\r\n    out[2] =  (low >>> 16) & 0xff\r\n    out[3] =  (low >>> 24) & 0xff\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} num\r\n * @returns {Uint8Array}\r\n */\r\nexport function le64(num) {\r\n    needs(Number.isSafeInteger(num), 'Number too large for JavaScript to safely process')\r\n\r\n    const high = (num / 0x100000000)|0\r\n    const low =  (num & 0x0ffffffff)\r\n    const out = new Uint8Array(8)\r\n    out[0] =  low          & 0xff\r\n    out[1] =  (low >>>  8) & 0xff\r\n    out[2] =  (low >>> 16) & 0xff\r\n    out[3] =  (low >>> 24) & 0xff\r\n    out[4] = high          & 0xff\r\n    out[5] = (high >>>  8) & 0xff\r\n    out[6] = (high >>> 16) & 0xff\r\n    out[7] = (high >>> 24) & 0xff\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} buf\r\n * @returns {number}\r\n */\r\nexport function load32le(buf) {\r\n    return buf[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} ctx\r\n * @param {number} offset\r\n * @returns {number}\r\n */\r\nexport function readInt32BE(ctx, offset) {\r\n    return load32le(ctx.slice(offset, offset + 4))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} output\r\n * @param {number} num\r\n * @param {number} start\r\n * @returns {*}\r\n */\r\nexport function write32le(output, num, start) {\r\n    if (start >= output.length)\r\n        return output;\r\n    output[start    ] = (num         & 0xff)\r\n    if (start + 1 >= output.length)\r\n        return output;\r\n    output[start + 1] = ((num >>>  8) & 0xff)\r\n    if (start + 2 >= output.length)\r\n        return output;\r\n    output[start + 2] = ((num >>> 16) & 0xff)\r\n    if (start + 3 >= output.length)\r\n        return output;\r\n    output[start + 3] = ((num >>> 24) & 0xff)\r\n    return output\r\n}\r\n\r\n/**\r\n *\r\n * @param {boolean} condition\r\n * @param {string} message\r\n */\r\nexport function needs(condition, message= 'An unknown error occurred') {\r\n    if (!condition) throw new Error(message)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array|string} pieces\r\n * @returns {Uint8Array}\r\n * @constructor\r\n */\r\nexport function PAE(...pieces) {\r\n    let out = le64(pieces.length)\r\n    for (let piece of pieces) {\r\n        let p = to_u8(piece)\r\n        needs(p instanceof Uint8Array, 'Only string and Uint8Array is allowed')\r\n        let len = le64(p.length)\r\n        out = new Uint8Array([ ...out, ...len, ...p ])\r\n    }\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number }num\r\n * @returns {Uint8Array}\r\n */\r\nexport function random_bytes(num = 0) {\r\n    const buf = new Uint8Array(num)\r\n    if (typeof window !== 'undefined') {\r\n        if (window.crypto && window.crypto.getRandomValues) {\r\n            window.crypto.getRandomValues(buf)\r\n            return buf\r\n        }\r\n        if (typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'export function') {\r\n            window.msCrypto.getRandomValues(buf)\r\n            return buf\r\n        }\r\n    }\r\n    if (randomBytes) {\r\n        const rand = randomBytes(num)\r\n        buf.set(rand, 0)\r\n        return buf\r\n    }\r\n    throw new Error('No secure random number generator available')\r\n}\r\n\r\n/**\r\n *\r\n * @param {string|number|Uint8Array} mixed\r\n * @param {boolean} tolerate_integers\r\n * @returns {Uint8Array}\r\n */\r\nexport function to_u8(mixed, tolerate_integers = false) {\r\n    if (mixed instanceof Uint8Array) {\r\n        return mixed\r\n    } else if (typeof mixed === 'string') {\r\n        return (new TextEncoder()).encode(mixed)\r\n    } else if (mixed instanceof Number && tolerate_integers) {\r\n        return le64(mixed)\r\n    }\r\n    throw new Error(`Unsupported type: ${typeof mixed}`)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} arrs\r\n * @returns {Uint8Array}\r\n */\r\nexport function u8_concat(...arrs) {\r\n    let len = 0\r\n    for (const arr of arrs) {\r\n        if (arr.length)\r\n            len += arr.length\r\n    }\r\n    const u8 = new Uint8Array(len)\r\n    let start = 0\r\n    for (const arr of arrs) {\r\n        u8.set(arr, start)\r\n        start += arr.length\r\n    }\r\n    return u8\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} a\r\n * @param {Uint8Array} b\r\n * @returns {boolean}\r\n */\r\nexport function u8_equal(a, b) {\r\n    if (typeof timingSafeEqual === 'undefined') {\r\n        needs(a instanceof Uint8Array, 'Must be Uint8Array')\r\n        needs(b instanceof Uint8Array, 'Must be Uint8Array')\r\n        if (a.length !== b.length) {\r\n            return false\r\n        }\r\n        let d = 0\r\n        for (let i = 0; i < a.length; i++) {\r\n            d |= (a[i] ^ b[i])\r\n        }\r\n        return d === 0\r\n    }\r\n    return timingSafeEqual(to_u8(a), to_u8(b))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} uint8arr\r\n * @returns {string}\r\n */\r\nexport function u8_to_hex(uint8arr) {\r\n    const output = []\r\n    for (let i = 0; i < uint8arr.length; i++) {\r\n        output.push(byteToHex[uint8arr[i]])\r\n    }\r\n    return output.join('')\r\n}\r\n","import { le32, le64, needs, load32le, readInt32BE, write32le } from './util.js'\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n */\r\nfunction add(a, b)\r\n{\r\n    return ((a + b) & 0xffffffff) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} v\r\n * @param {number} n\r\n * @returns {number}\r\n */\r\nfunction rotate(v, n)\r\n{\r\n    v &= 0xffffffff;\r\n    n &= 31;\r\n    return (\r\n        (\r\n            (v << n) | (v >>> (32 - n))\r\n        )\r\n    ) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n */\r\nfunction xor(a, b)\r\n{\r\n    return ((a ^ b) & 0xffffffff) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} c\r\n * @param {number} d\r\n * @returns {number[]}\r\n */\r\nexport function quarterRound(a, b, c, d)\r\n{\r\n    // a = PLUS(a,b); d = ROTATE(XOR(d,a),16);\r\n    a = (a + b) & 0xffffffff;\r\n    d = rotate(d ^ a, 16);\r\n\r\n    // c = PLUS(c,d); b = ROTATE(XOR(b,c),12);\r\n    c = (c + d) & 0xffffffff;\r\n    b = rotate(b ^ c, 12);\r\n\r\n    // a = PLUS(a,b); d = ROTATE(XOR(d,a), 8);\r\n    a = (a + b) & 0xffffffff;\r\n    d = rotate(d ^ a, 8);\r\n\r\n    // c = PLUS(c,d); b = ROTATE(XOR(b,c), 7);\r\n    c = (c + d) & 0xffffffff;\r\n    b = rotate(b ^ c, 7);\r\n    return [a >>> 0, b >>> 0, c >>> 0, d >>> 0];\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nfunction chachaCtx(key, nonce, counter = 0) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 8, 'Invalid nonce length')\r\n    counter = le64(counter)\r\n    return new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...counter, ...nonce]))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nfunction chachaIetfCtx(key, nonce, counter = 0) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 12, 'Invalid nonce length')\r\n    counter = le32(counter)\r\n    return new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...counter, ...nonce]))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} ctx\r\n * @param {Uint8Array} message\r\n * @returns {Uint8Array}\r\n */\r\nexport function chacha20(ctx, message)\r\n{\r\n    let j0 = readInt32BE(ctx, 0)\r\n    let j1 = readInt32BE(ctx, 1 << 2)\r\n    let j2 = readInt32BE(ctx, 2 << 2)\r\n    let j3 = readInt32BE(ctx, 3 << 2)\r\n    let j4 = readInt32BE(ctx, 4 << 2)\r\n    let j5 = readInt32BE(ctx, 5 << 2)\r\n    let j6 = readInt32BE(ctx, 6 << 2)\r\n    let j7 = readInt32BE(ctx, 7 << 2)\r\n    let j8 = readInt32BE(ctx, 8 << 2)\r\n    let j9 = readInt32BE(ctx, 9 << 2)\r\n    let j10 = readInt32BE(ctx, 10 << 2)\r\n    let j11 = readInt32BE(ctx, 11 << 2)\r\n    let j12 = readInt32BE(ctx, 12 << 2)\r\n    let j13 = readInt32BE(ctx, 13 << 2)\r\n    let j14 = readInt32BE(ctx, 14 << 2)\r\n    let j15 = readInt32BE(ctx, 15 << 2)\r\n\r\n    let x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\r\n\r\n    let start = 0;\r\n    let end;\r\n    let len = message.length;\r\n    let cipher = new Uint8Array(len);\r\n    let chunk = new Uint8Array(64);\r\n\r\n    while (start < len) {\r\n        end = start + 64 >= len\r\n            ? len\r\n            : start + 64\r\n        chunk.fill(0, 0)\r\n        let j = 0\r\n        for (let i = start; i < end; i++) {\r\n            chunk[j++] = message[i]\r\n        }\r\n\r\n        x0 =   j0;   x1 = j1;   x2 = j2;   x3 = j3;\r\n        x4 =   j4;   x5 = j5;   x6 = j6;   x7 = j7;\r\n        x8 =   j8;   x9 = j9; x10 = j10; x11 = j11;\r\n        x12 = j12; x13 = j13; x14 = j14; x15 = j15;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            [x0, x4, x8, x12] = quarterRound(x0, x4, x8, x12);\r\n            [x1, x5, x9, x13] = quarterRound(x1, x5, x9, x13);\r\n            [x2, x6, x10, x14] = quarterRound(x2, x6, x10, x14);\r\n            [x3, x7, x11, x15] = quarterRound(x3, x7, x11, x15);\r\n\r\n            [x0, x5, x10, x15] = quarterRound(x0, x5, x10, x15);\r\n            [x1, x6, x11, x12] = quarterRound(x1, x6, x11, x12);\r\n            [x2, x7, x8, x13] = quarterRound(x2, x7, x8, x13);\r\n            [x3, x4, x9, x14] = quarterRound(x3, x4, x9, x14)\r\n        }\r\n        x0 = add(x0, j0)\r\n        x1 = add(x1, j1)\r\n        x2 = add(x2, j2)\r\n        x3 = add(x3, j3)\r\n        x4 = add(x4, j4)\r\n        x5 = add(x5, j5)\r\n        x6 = add(x6, j6)\r\n        x7 = add(x7, j7)\r\n        x8 = add(x8, j8)\r\n        x9 = add(x9, j9)\r\n        x10 = add(x10, j10)\r\n        x11 = add(x11, j11)\r\n        x12 = add(x12, j12)\r\n        x13 = add(x13, j13)\r\n        x14 = add(x14, j14)\r\n        x15 = add(x15, j15)\r\n\r\n        x0 = xor(x0, load32le(chunk.slice(0, 4)))\r\n        x1 = xor(x1, load32le(chunk.slice(4, 8)))\r\n        x2 = xor(x2, load32le(chunk.slice(8, 12)))\r\n        x3 = xor(x3, load32le(chunk.slice(12, 16)))\r\n        x4 = xor(x4, load32le(chunk.slice(16, 20)))\r\n        x5 = xor(x5, load32le(chunk.slice(20, 24)))\r\n        x6 = xor(x6, load32le(chunk.slice(24, 28)))\r\n        x7 = xor(x7, load32le(chunk.slice(28, 32)))\r\n        x8 = xor(x8, load32le(chunk.slice(32, 36)))\r\n        x9 = xor(x9, load32le(chunk.slice(36, 40)))\r\n        x10 = xor(x10, load32le(chunk.slice(40, 44)))\r\n        x11 = xor(x11, load32le(chunk.slice(44, 48)))\r\n        x12 = xor(x12, load32le(chunk.slice(48, 52)))\r\n        x13 = xor(x13, load32le(chunk.slice(52, 56)))\r\n        x14 = xor(x14, load32le(chunk.slice(56, 60)))\r\n        x15 = xor(x15, load32le(chunk.slice(60, 64)))\r\n\r\n        cipher = write32le(cipher, x0, start)\r\n        cipher = write32le(cipher, x1, start + 4)\r\n        cipher = write32le(cipher, x2, start + 8)\r\n        cipher = write32le(cipher, x3, start + 12)\r\n        cipher = write32le(cipher, x4, start + 16)\r\n        cipher = write32le(cipher, x5, start + 20)\r\n        cipher = write32le(cipher, x6, start + 24)\r\n        cipher = write32le(cipher, x7, start + 28)\r\n        cipher = write32le(cipher, x8, start + 32)\r\n        cipher = write32le(cipher, x9, start + 36)\r\n        cipher = write32le(cipher, x10, start + 40)\r\n        cipher = write32le(cipher, x11, start + 44)\r\n        cipher = write32le(cipher, x12, start + 48)\r\n        cipher = write32le(cipher, x13, start + 52)\r\n        cipher = write32le(cipher, x14, start + 56)\r\n        cipher = write32le(cipher, x15, start + 60)\r\n\r\n        j12++;\r\n        start += 64;\r\n    }\r\n    return cipher.slice(0, len);\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} len\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function stream(len, nonce, key, counter = 1) {\r\n    needs(len >= 0, 'Length cannot be negative')\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 8, 'Nonce must be 8 bytes')\r\n    return chacha20(chachaCtx(key, nonce, counter), new Uint8Array(len))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function streamXorIc(message, nonce, key, counter) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 8, 'Nonce must be 8 bytes')\r\n    return chacha20(chachaCtx(key, nonce, counter), message)\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} len\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStream(len, nonce, key, counter = 1) {\r\n    needs(len >= 0, 'Length cannot be negative')\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 12, 'Nonce must be 12 bytes')\r\n    return chacha20(chachaIetfCtx(key, nonce, counter), new Uint8Array(len))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStreamXorIc(message, nonce, key, counter) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 12, 'Nonce must be 12 bytes')\r\n    return chacha20(chachaIetfCtx(key, nonce, counter), message)\r\n}\r\n","import { needs, readInt32BE, write32le } from './util.js'\r\nimport * as chacha from './chacha.js'\r\n\r\nfunction hchachaCtx(key, nonce) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 16, 'Invalid nonce length')\r\n    return (new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...nonce])))\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @returns {Uint8Array}\r\n */\r\nexport function hchacha20(nonce, key) {\r\n    const ctx = hchachaCtx(key, nonce)\r\n    let x0 = readInt32BE(ctx, 0)\r\n    let x1 = readInt32BE(ctx, 1 << 2)\r\n    let x2 = readInt32BE(ctx, 2 << 2)\r\n    let x3 = readInt32BE(ctx, 3 << 2)\r\n    let x4 = readInt32BE(ctx, 4 << 2)\r\n    let x5 = readInt32BE(ctx, 5 << 2)\r\n    let x6 = readInt32BE(ctx, 6 << 2)\r\n    let x7 = readInt32BE(ctx, 7 << 2)\r\n    let x8 = readInt32BE(ctx, 8 << 2)\r\n    let x9 = readInt32BE(ctx, 9 << 2)\r\n    let x10 = readInt32BE(ctx, 10 << 2)\r\n    let x11 = readInt32BE(ctx, 11 << 2)\r\n    let x12 = readInt32BE(ctx, 12 << 2)\r\n    let x13 = readInt32BE(ctx, 13 << 2)\r\n    let x14 = readInt32BE(ctx, 14 << 2)\r\n    let x15 = readInt32BE(ctx, 15 << 2)\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        [x0, x4, x8, x12] = chacha.quarterRound(x0, x4, x8, x12);\r\n        [x1, x5, x9, x13] = chacha.quarterRound(x1, x5, x9, x13);\r\n        [x2, x6, x10, x14] = chacha.quarterRound(x2, x6, x10, x14);\r\n        [x3, x7, x11, x15] = chacha.quarterRound(x3, x7, x11, x15);\r\n\r\n        [x0, x5, x10, x15] = chacha.quarterRound(x0, x5, x10, x15);\r\n        [x1, x6, x11, x12] = chacha.quarterRound(x1, x6, x11, x12);\r\n        [x2, x7, x8, x13] = chacha.quarterRound(x2, x7, x8, x13);\r\n        [x3, x4, x9, x14] = chacha.quarterRound(x3, x4, x9, x14);\r\n    }\r\n\r\n    const out = new Uint8Array(32)\r\n    write32le(out, x0, 0)\r\n    write32le(out, x1, 1 << 2)\r\n    write32le(out, x2, 2 << 2)\r\n    write32le(out, x3, 3 << 2)\r\n    write32le(out, x12, 4 << 2)\r\n    write32le(out, x13, 5 << 2)\r\n    write32le(out, x14, 6 << 2)\r\n    write32le(out, x15, 7 << 2)\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} length\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function stream(length, key, nonce, counter = 1) {\r\n    let outnonce = new nonce.slice(16, 24)\r\n    return chacha.stream(\r\n        length,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function streamXorIc(message, nonce, key, counter = 1) {\r\n    needs(key.length === 32, 'Key must be 32 bytes')\r\n    needs(nonce.length === 24, 'Nonce must be 32 bytes')\r\n    let outnonce = new nonce.slice(16, 24)\r\n    return chacha.streamXorIc(\r\n        message,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} length\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStream(length, key, nonce, counter = 1) {\r\n    let outnonce = new Uint8Array(12)\r\n    outnonce.set(nonce.slice(16, 24), 0)\r\n    return chacha.ietfStream(\r\n        length,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStreamXorIc(message, nonce, key, counter = 1) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 24, 'Nonce must be 24 bytes')\r\n    const outnonce = new Uint8Array(12)\r\n    outnonce.set(nonce.slice(16, 24), 4)\r\n    return chacha.ietfStreamXorIc(\r\n        message,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\nexport function encrypt(message, nonce, key, counter = 1) {\r\n    return ietfStreamXorIc(message, nonce, key, counter)\r\n}\r\n\r\nexport function decrypt(message, nonce, key, counter = 1) {\r\n    return ietfStreamXorIc(message, nonce, key, counter)\r\n}\r\n","import { blake2bInit, blake2bUpdate, blake2bFinal } from './blakejs/blake2b.js'\r\nimport { ietfStreamXorIc as xchacha20 } from './xchacha.js'\r\nimport { b64u_dec, b64u_enc, from_u8, needs, PAE, random_bytes, to_u8, u8_concat, u8_equal } from './util.js'\r\n\r\nconst V4_LOCAL = 'v4.local.'\r\n\r\nconst encoder = new TextEncoder()\r\nconst V4_LOCAL_U8 = encoder.encode(V4_LOCAL)\r\nconst PASETO_V4_ENC_KEY = encoder.encode('paseto-encryption-key')\r\nconst PASETO_V4_AUTH_KEY = encoder.encode('paseto-auth-key-for-aead')\r\n\r\nexport class PasetoV4Local\r\n{\r\n    constructor(bytes) {\r\n        needs(bytes instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n        needs(bytes.length === 32, \"Key must be 32 bytes\")\r\n        this.bytes = bytes\r\n    }\r\n\r\n    /**\r\n     * @returns {PasetoV4Local}\r\n     */\r\n    static generate() {\r\n        const random = random_bytes(32)\r\n        return new PasetoV4Local(random)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {string} implicit\r\n     * @returns {Promise<object>}\r\n     */\r\n    async decode(token, implicit = '') {\r\n        return JSON.parse(await this.decrypt(token, implicit))\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string|object} claims\r\n     * @param {string|object} footer\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async encode(claims, footer = '', implicit = '') {\r\n        if (typeof footer === 'object') {\r\n            footer = JSON.stringify(footer)\r\n        }\r\n        if (typeof footer === 'string') {\r\n            footer = to_u8(footer)\r\n        }\r\n        return this.encrypt(JSON.stringify(claims), footer, implicit)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {Uint8Array} expected\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async assertFooter(token, expected) {\r\n        const pieces = token.split('.')\r\n        needs(pieces.length === 4, \"No footer provided\")\r\n        const stored = b64u_dec(pieces[3], expected instanceof Uint8Array)\r\n        return u8_equal(stored, expected)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {boolean} as_object\r\n     * @returns {string|Uint8Array|object}\r\n     */\r\n    static getFooter(token, as_object = false) {\r\n        const pieces = token.split('.')\r\n        needs(pieces.length === 4, \"No footer provided\")\r\n        const stored = b64u_dec(pieces[3], as_object)\r\n        if (as_object) {\r\n            return JSON.parse(from_u8(stored))\r\n        }\r\n        return stored\r\n    }\r\n\r\n    /**\r\n     * @returns {Uint8Array}\r\n     */\r\n    getKey() {\r\n        return this.bytes\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {Uint8Array} footer\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async encrypt(message, footer = '', implicit = '') {\r\n        const n = random_bytes(32)\r\n        let state\r\n\r\n        state = blake2bInit(56, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_ENC_KEY)\r\n        blake2bUpdate(state, n)\r\n        const tmp = blake2bFinal(state)\r\n        const Ek = tmp.slice(0, 32)\r\n        const n2 = tmp.slice(32)\r\n\r\n        state = blake2bInit(32, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_AUTH_KEY)\r\n        blake2bUpdate(state, n)\r\n        const Ak = blake2bFinal(state)\r\n\r\n        const c = await xchacha20(to_u8(message), n2, Ek, 0)\r\n\r\n        state = blake2bInit(32, Ak)\r\n        blake2bUpdate(state, PAE(V4_LOCAL_U8, n, c, footer, implicit))\r\n        const t = blake2bFinal(state)\r\n\r\n        const payload = b64u_enc(u8_concat(n, c, t))\r\n        if (footer.length > 0) {\r\n            return [V4_LOCAL.slice(0, 8), payload, b64u_enc(footer)].join('.')\r\n        }\r\n        return [V4_LOCAL.slice(0, 8), payload].join('.')\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async decrypt(token, implicit = '') {\r\n        const {n, c, t, footer} = await this.decompose(token)\r\n        let state\r\n\r\n        state = blake2bInit(56, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_ENC_KEY)\r\n        blake2bUpdate(state, n)\r\n        const tmp = blake2bFinal(state)\r\n        const Ek = tmp.slice(0, 32)\r\n        const n2 = tmp.slice(32)\r\n\r\n        state = blake2bInit(32, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_AUTH_KEY)\r\n        blake2bUpdate(state, n)\r\n        const Ak = blake2bFinal(state)\r\n\r\n        state = blake2bInit(32, Ak)\r\n        blake2bUpdate(state, PAE(V4_LOCAL_U8, n, c, footer, implicit))\r\n        const t2 = blake2bFinal(state)\r\n\r\n        needs(u8_equal(t, t2), 'Invalid tag')\r\n        const pt = await xchacha20(c, n2, Ek, 0)\r\n        return (new TextDecoder()).decode(pt)\r\n    }\r\n\r\n    /**\r\n     * @param {string} token\r\n     * @returns {Promise<{epk: Uint8Array, tag: Uint8Array, edk: Uint8Array, footer: Uint8Array}>}\r\n     */\r\n    async decompose(token) {\r\n        const header = to_u8(token.slice(0, 9))\r\n        needs(u8_equal(header, V4_LOCAL_U8), 'Invalid token')\r\n        const tokenPieces = token.split('.')\r\n        const payload = b64u_dec(tokenPieces[2], true)\r\n        const l = payload.length\r\n        return {\r\n            n: payload.slice(0, 32),\r\n            c: payload.slice(32, l - 32),\r\n            t: payload.slice(l - 32),\r\n            footer: tokenPieces.length > 3\r\n                ? b64u_dec(tokenPieces[3])\r\n                : new Uint8Array(0)\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.PasetoV4Local = PasetoV4Local\r\n}\r\n","import * as nacl from 'tweetnacl'\r\n\r\n/*\r\n * ed2curve: convert Ed25519 signing key pair into Curve25519\r\n * key pair suitable for Diffie-Hellman key exchange.\r\n *\r\n * Written by Dmitry Chestnykh in 2014. Public domain.\r\n *\r\n * Extracted from upstream for the sake of ES6 modules.\r\n */\r\nconst gf = function(init) {\r\n    let i, r = new Float64Array(16);\r\n    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\r\n    return r;\r\n};\r\n\r\nlet gf0 = gf(),\r\n    gf1 = gf([1]),\r\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\r\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\r\n\r\nfunction car25519(o) {\r\n    let c;\r\n    let i;\r\n    for (i = 0; i < 16; i++) {\r\n        o[i] += 65536;\r\n        c = Math.floor(o[i] / 65536);\r\n        o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);\r\n        o[i] -= (c * 65536);\r\n    }\r\n}\r\n\r\nfunction sel25519(p, q, b) {\r\n    let t, c = ~(b-1);\r\n    for (let i = 0; i < 16; i++) {\r\n        t = c & (p[i] ^ q[i]);\r\n        p[i] ^= t;\r\n        q[i] ^= t;\r\n    }\r\n}\r\n\r\nfunction unpack25519(o, n) {\r\n    let i;\r\n    for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\r\n    o[15] &= 0x7fff;\r\n}\r\n\r\n// addition\r\nfunction A(o, a, b) {\r\n    let i;\r\n    for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;\r\n}\r\n\r\n// subtraction\r\nfunction Z(o, a, b) {\r\n    let i;\r\n    for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;\r\n}\r\n\r\n// multiplication\r\nfunction M(o, a, b) {\r\n    let i, j, t = new Float64Array(31);\r\n    for (i = 0; i < 31; i++) t[i] = 0;\r\n    for (i = 0; i < 16; i++) {\r\n        for (j = 0; j < 16; j++) {\r\n            t[i+j] += a[i] * b[j];\r\n        }\r\n    }\r\n    for (i = 0; i < 15; i++) {\r\n        t[i] += 38 * t[i+16];\r\n    }\r\n    for (i = 0; i < 16; i++) o[i] = t[i];\r\n    car25519(o);\r\n    car25519(o);\r\n}\r\n\r\n// squaring\r\nfunction S(o, a) {\r\n    M(o, a, a);\r\n}\r\n\r\n// inversion\r\nfunction inv25519(o, i) {\r\n    let c = gf();\r\n    let a;\r\n    for (a = 0; a < 16; a++) c[a] = i[a];\r\n    for (a = 253; a >= 0; a--) {\r\n        S(c, c);\r\n        if(a !== 2 && a !== 4) M(c, c, i);\r\n    }\r\n    for (a = 0; a < 16; a++) o[a] = c[a];\r\n}\r\n\r\nfunction pack25519(o, n) {\r\n    let i, j, b;\r\n    let m = gf(), t = gf();\r\n    for (i = 0; i < 16; i++) t[i] = n[i];\r\n    car25519(t);\r\n    car25519(t);\r\n    car25519(t);\r\n    for (j = 0; j < 2; j++) {\r\n        m[0] = t[0] - 0xffed;\r\n        for (i = 1; i < 15; i++) {\r\n            m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\r\n            m[i-1] &= 0xffff;\r\n        }\r\n        m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\r\n        b = (m[15]>>16) & 1;\r\n        m[14] &= 0xffff;\r\n        sel25519(t, m, 1-b);\r\n    }\r\n    for (i = 0; i < 16; i++) {\r\n        o[2*i] = t[i] & 0xff;\r\n        o[2*i+1] = t[i] >> 8;\r\n    }\r\n}\r\n\r\nfunction par25519(a) {\r\n    let d = new Uint8Array(32);\r\n    pack25519(d, a);\r\n    return d[0] & 1;\r\n}\r\n\r\nfunction vn(x, xi, y, yi, n) {\r\n    let i, d = 0;\r\n    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];\r\n    return (1 & ((d - 1) >>> 8)) - 1;\r\n}\r\n\r\nfunction crypto_verify_32(x, xi, y, yi) {\r\n    return vn(x, xi, y, yi, 32);\r\n}\r\n\r\nfunction neq25519(a, b) {\r\n    let c = new Uint8Array(32), d = new Uint8Array(32);\r\n    pack25519(c, a);\r\n    pack25519(d, b);\r\n    return crypto_verify_32(c, 0, d, 0);\r\n}\r\n\r\nfunction pow2523(o, i) {\r\n    let c = gf();\r\n    let a;\r\n    for (a = 0; a < 16; a++) c[a] = i[a];\r\n    for (a = 250; a >= 0; a--) {\r\n        S(c, c);\r\n        if (a !== 1) M(c, c, i);\r\n    }\r\n    for (a = 0; a < 16; a++) o[a] = c[a];\r\n}\r\n\r\nfunction set25519(r, a) {\r\n    let i;\r\n    for (i = 0; i < 16; i++) r[i] = a[i] | 0;\r\n}\r\n\r\nfunction unpackneg(r, p) {\r\n    let t = gf(), chk = gf(), num = gf(),\r\n        den = gf(), den2 = gf(), den4 = gf(),\r\n        den6 = gf();\r\n\r\n    set25519(r[2], gf1);\r\n    unpack25519(r[1], p);\r\n    S(num, r[1]);\r\n    M(den, num, D);\r\n    Z(num, num, r[2]);\r\n    A(den, r[2], den);\r\n\r\n    S(den2, den);\r\n    S(den4, den2);\r\n    M(den6, den4, den2);\r\n    M(t, den6, num);\r\n    M(t, t, den);\r\n\r\n    pow2523(t, t);\r\n    M(t, t, num);\r\n    M(t, t, den);\r\n    M(t, t, den);\r\n    M(r[0], t, den);\r\n\r\n    S(chk, r[0]);\r\n    M(chk, chk, den);\r\n    if (neq25519(chk, num)) M(r[0], r[0], I);\r\n\r\n    S(chk, r[0]);\r\n    M(chk, chk, den);\r\n    if (neq25519(chk, num)) return -1;\r\n\r\n    if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);\r\n\r\n    M(r[3], r[0], r[1]);\r\n    return 0;\r\n}\r\n\r\n// ----\r\n\r\n// Converts Ed25519 public key to Curve25519 public key.\r\n// montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\r\nexport function convertPublicKey(pk) {\r\n    let z = new Uint8Array(32),\r\n        q = [gf(), gf(), gf(), gf()],\r\n        a = gf(), b = gf();\r\n\r\n    if (unpackneg(q, pk)) return null; // reject invalid key\r\n\r\n    let y = q[1];\r\n\r\n    A(a, gf1, y);\r\n    Z(b, gf1, y);\r\n    inv25519(b, b);\r\n    M(a, a, b);\r\n\r\n    pack25519(z, a);\r\n    return z;\r\n}\r\n\r\n// Converts Ed25519 secret key to Curve25519 secret key.\r\nexport function convertSecretKey(sk) {\r\n    let d = new Uint8Array(64), o = new Uint8Array(32), i;\r\n    nacl.default.lowlevel.crypto_hash(d, sk, 32);\r\n    d[0] &= 248;\r\n    d[31] &= 127;\r\n    d[31] |= 64;\r\n    for (i = 0; i < 32; i++) o[i] = d[i];\r\n    for (i = 0; i < 64; i++) d[i] = 0;\r\n    return o;\r\n}\r\n\r\nexport function convertKeyPair(edKeyPair) {\r\n    let publicKey = convertPublicKey(edKeyPair.publicKey);\r\n    if (!publicKey) return null;\r\n    return {\r\n        publicKey: publicKey,\r\n        secretKey: convertSecretKey(edKeyPair.secretKey)\r\n    };\r\n}\r\n","import * as nacl from 'tweetnacl'\r\nimport { PasetoV4Local } from \"./paseto.v4.local.js\"\r\nimport { blake2b } from './blakejs/blake2b.js'\r\nimport { ietfStreamXorIc as xchacha20 } from './xchacha.js'\r\nimport { b64u_dec, b64u_enc, needs, to_u8, u8_concat, u8_equal } from './util.js'\r\nimport { convertPublicKey, convertSecretKey } from './ed2curve.js'\r\n\r\nconst K4_SEAL = 'k4.seal.'\r\nconst encoder = new TextEncoder()\r\nconst K4_SEAL_U8 = encoder.encode(K4_SEAL)\r\n\r\nconst PREFIX_ENCRYPT = new Uint8Array([0x01])\r\nconst PREFIX_AUTH = new Uint8Array([0x02])\r\n\r\nexport class PaserkK4Seal\r\n{\r\n    constructor(xpk, xsk = null) {\r\n        needs(xpk instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n        needs(xpk.length === 32, \"Public Key must be 32 bytes\")\r\n        this.xpk = xpk\r\n        if (xsk) {\r\n            needs(xsk instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n            needs(xsk.length === 32, \"Secret Key must be 64 bytes\")\r\n            this.xsk = xsk\r\n        } else {\r\n            this.xsk = null\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {PasetoV4Public} v4pub\r\n     * @returns {PaserkK4Seal}\r\n     */\r\n    static fromV4Public(v4pub) {\r\n        return PaserkK4Seal.fromEdwardsKeys(v4pub.pk, v4pub.sk)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Uint8Array} pk\r\n     * @param {Uint8Array} sk\r\n     * @returns {PaserkK4Seal}\r\n     */\r\n    static fromEdwardsKeys(pk, sk = null) {\r\n        needs(pk instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n        needs(pk.length === 32, \"Public Key must be 32 bytes\")\r\n        const xpk = convertPublicKey(pk)\r\n        if (sk) {\r\n            needs(sk instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n            needs(sk.length === 64, \"Secret Key must be 64 bytes\")\r\n            return new PaserkK4Seal(xpk, convertSecretKey(sk))\r\n        }\r\n        return new PaserkK4Seal(xpk, null)\r\n    }\r\n\r\n    /**\r\n     * @returns {PaserkK4Seal}\r\n     */\r\n    static generate() {\r\n        const kp = nacl.default.sign.keyPair()\r\n        return PaserkK4Seal.fromEdwardsKeys(kp.publicKey, kp.secretKey)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {PasetoV4Local} v4local\r\n     * @returns {Promise<string>}\r\n     */\r\n    async wrap(v4local) {\r\n        const ephemeral = nacl.default.box.keyPair()\r\n        const epk = ephemeral.publicKey.slice()\r\n        const xk = nacl.default.scalarMult(ephemeral.secretKey, this.xpk)\r\n\r\n        const Ek = blake2b(\r\n            u8_concat(PREFIX_ENCRYPT, K4_SEAL_U8, xk, epk, this.xpk),\r\n            null,\r\n            32\r\n        )\r\n        const Ak = blake2b(\r\n            u8_concat(PREFIX_AUTH, K4_SEAL_U8, xk, epk, this.xpk),\r\n            null,\r\n            32\r\n        )\r\n        const nonce = blake2b(\r\n            u8_concat(epk, this.xpk),\r\n            null,\r\n            24\r\n        )\r\n\r\n        const edk = xchacha20(v4local.getKey(), nonce, Ek, 0)\r\n        const tag = blake2b(\r\n            u8_concat(K4_SEAL_U8, epk, edk),\r\n            Ak,\r\n            32\r\n        )\r\n        return K4_SEAL + b64u_enc(u8_concat(tag, epk, edk))\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} paserk\r\n     * @returns {Promise<PasetoV4Local>}\r\n     */\r\n    async unwrap(paserk) {\r\n        needs(this.xsk, 'Cannot unwrap: No secret key was provided')\r\n\r\n        const {tag, epk, edk} = await this.decompose(paserk)\r\n        const xk = nacl.default.scalarMult(this.xsk, epk)\r\n\r\n        const Ak = blake2b(\r\n            u8_concat(PREFIX_AUTH, K4_SEAL_U8, xk, epk, this.xpk),\r\n            null,\r\n            32\r\n        )\r\n        const t2 = blake2b(\r\n            u8_concat(K4_SEAL_U8, epk, edk),\r\n            Ak,\r\n            32\r\n        )\r\n        needs(u8_equal(tag, t2), 'Invalid auth tag')\r\n\r\n        const nonce = blake2b(\r\n            u8_concat(epk, this.xpk),\r\n            null,\r\n            24\r\n        )\r\n        const Ek = blake2b(\r\n            u8_concat(PREFIX_ENCRYPT, K4_SEAL_U8, xk, epk, this.xpk),\r\n            null,\r\n            32\r\n        )\r\n\r\n        return new PasetoV4Local(xchacha20(edk, nonce, Ek, 0))\r\n    }\r\n\r\n    /**\r\n     * @param {string} token\r\n     * @returns {Promise<{epk: Uint8Array, tag: Uint8Array, edk: Uint8Array}>}\r\n     */\r\n    async decompose(token) {\r\n        const header = to_u8(token.slice(0, 8))\r\n        needs(u8_equal(header, K4_SEAL_U8), 'Invalid token')\r\n        const tokenPieces = token.split('.')\r\n        needs(tokenPieces.length === 3, 'Invalid token')\r\n        const decoded = b64u_dec(tokenPieces[2], true)\r\n        needs(decoded.length === 96, 'Invalid payload length')\r\n        return {\r\n            tag: decoded.slice(0, 32),\r\n            epk: decoded.slice(32, 64),\r\n            edk: decoded.slice(64)\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.PaserkK4Seal = PaserkK4Seal\r\n}\r\n"],"names":["normalizeInput","input","ret","Uint8Array","Error","TextEncoder","encode","ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA82","map","x","blake2bCompress","ctx","last","h","t","parameterBlock","blake2bInit","outlen","key","salt","personal","length","fill","set","blake2bUpdate","blake2bFinal","out","blake2b","util.normalizeInput","n","toString","padStart","b64u_chars","b64u_lookup","charCodeAt","b64u_dec","base64","as_uint8array","encoded1","encoded2","encoded3","encoded4","bufferLength","len","p","bytes","TextDecoder","decode","b64u_enc","substring","le64","num","needs","Number","isSafeInteger","high","low","load32le","buf","readInt32BE","offset","slice","write32le","output","start","condition","message","PAE","pieces","piece","to_u8","random_bytes","window","crypto","getRandomValues","msCrypto","randomBytes","rand","mixed","tolerate_integers","u8_concat","arrs","u8","u8_equal","timingSafeEqual","add","rotate","xor","quarterRound","chachaIetfCtx","nonce","counter","le32","concat","ietfStreamXorIc","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","end","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","cipher","chunk","j","chacha20","hchacha20","hchachaCtx","chacha.quarterRound","outnonce","chacha.ietfStreamXorIc","V4_LOCAL","encoder","V4_LOCAL_U8","PASETO_V4_ENC_KEY","PASETO_V4_AUTH_KEY","PasetoV4Local","constructor","this","static","random","async","token","implicit","JSON","parse","decrypt","claims","footer","stringify","encrypt","expected","split","as_object","stored","from_u8","getKey","state","tmp","Ek","n2","Ak","xchacha20","payload","join","decompose","pt","tokenPieces","l","gf","init","r","Float64Array","gf0","gf1","D","I","car25519","o","Math","floor","sel25519","q","A","Z","M","S","pack25519","neq25519","xi","y","yi","vn","unpackneg","chk","den","den2","den4","den6","set25519","unpack25519","pow2523","par25519","convertPublicKey","pk","z","inv25519","K4_SEAL","K4_SEAL_U8","PREFIX_ENCRYPT","PREFIX_AUTH","PaserkK4Seal","xpk","xsk","v4pub","fromEdwardsKeys","sk","nacl","default","lowlevel","crypto_hash","convertSecretKey","kp","sign","keyPair","publicKey","secretKey","v4local","ephemeral","box","epk","xk","scalarMult","edk","tag","paserk","decoded","exports","Object","defineProperty","value"],"mappings":"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"}