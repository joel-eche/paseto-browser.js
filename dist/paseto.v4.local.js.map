{"version":3,"file":"paseto.v4.local.js","sources":["../lib/blakejs/blake2b.js","../lib/util.js","../lib/chacha.js","../lib/xchacha.js","../lib/paseto.v4.local.js"],"sourcesContent":["// Blake2B in pure Javascript\r\n// Adapted from the reference implementation in RFC7693\r\n// Ported to Javascript by DC - https://github.com/dcposch\r\n\r\nimport * as util from './util.js'\r\n\r\n// 64-bit unsigned addition\r\n// Sets v[a,a+1] += v[b,b+1]\r\n// v should be a Uint32Array\r\nfunction ADD64AA (v, a, b) {\r\n    const o0 = v[a] + v[b]\r\n    let o1 = v[a + 1] + v[b + 1]\r\n    if (o0 >= 0x100000000) {\r\n        o1++\r\n    }\r\n    v[a] = o0\r\n    v[a + 1] = o1\r\n}\r\n\r\n// 64-bit unsigned addition\r\n// Sets v[a,a+1] += b\r\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\r\nfunction ADD64AC (v, a, b0, b1) {\r\n    let o0 = v[a] + b0\r\n    if (b0 < 0) {\r\n        o0 += 0x100000000\r\n    }\r\n    let o1 = v[a + 1] + b1\r\n    if (o0 >= 0x100000000) {\r\n        o1++\r\n    }\r\n    v[a] = o0\r\n    v[a + 1] = o1\r\n}\r\n\r\n// Little-endian byte access\r\nfunction B2B_GET32 (arr, i) {\r\n    return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)\r\n}\r\n\r\n// G Mixing function\r\n// The ROTRs are inlined for speed\r\nfunction B2B_G (a, b, c, d, ix, iy) {\r\n    const x0 = m[ix]\r\n    const x1 = m[ix + 1]\r\n    const y0 = m[iy]\r\n    const y1 = m[iy + 1]\r\n\r\n    ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\r\n    ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\r\n\r\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\r\n    let xor0 = v[d] ^ v[a]\r\n    let xor1 = v[d + 1] ^ v[a + 1]\r\n    v[d] = xor1\r\n    v[d + 1] = xor0\r\n\r\n    ADD64AA(v, c, d)\r\n\r\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\r\n    xor0 = v[b] ^ v[c]\r\n    xor1 = v[b + 1] ^ v[c + 1]\r\n    v[b] = (xor0 >>> 24) ^ (xor1 << 8)\r\n    v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\r\n\r\n    ADD64AA(v, a, b)\r\n    ADD64AC(v, a, y0, y1)\r\n\r\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\r\n    xor0 = v[d] ^ v[a]\r\n    xor1 = v[d + 1] ^ v[a + 1]\r\n    v[d] = (xor0 >>> 16) ^ (xor1 << 16)\r\n    v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\r\n\r\n    ADD64AA(v, c, d)\r\n\r\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\r\n    xor0 = v[b] ^ v[c]\r\n    xor1 = v[b + 1] ^ v[c + 1]\r\n    v[b] = (xor1 >>> 31) ^ (xor0 << 1)\r\n    v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\r\n}\r\n\r\n// Initialization Vector\r\nconst BLAKE2B_IV32 = new Uint32Array([\r\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372,\r\n    0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c,\r\n    0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\r\n])\r\n\r\nconst SIGMA8 = [\r\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13,\r\n    6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1,\r\n    9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4,\r\n    10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5,\r\n    15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7,\r\n    14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2,\r\n    13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0,\r\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6,\r\n    1, 12, 0, 2, 11, 7, 5, 3\r\n]\r\n\r\n// These are offsets into a uint64 buffer.\r\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\r\n// because this is Javascript and we don't have uint64s\r\nconst SIGMA82 = new Uint8Array(\r\n    SIGMA8.map(function (x) {\r\n        return x * 2\r\n    })\r\n)\r\n\r\n// Compression function. 'last' flag indicates last block.\r\n// Note we're representing 16 uint64s as 32 uint32s\r\nconst v = new Uint32Array(32)\r\nconst m = new Uint32Array(32)\r\nfunction blake2bCompress (ctx, last) {\r\n    let i = 0\r\n\r\n    // init work variables\r\n    for (i = 0; i < 16; i++) {\r\n        v[i] = ctx.h[i]\r\n        v[i + 16] = BLAKE2B_IV32[i]\r\n    }\r\n\r\n    // low 64 bits of offset\r\n    v[24] = v[24] ^ ctx.t\r\n    v[25] = v[25] ^ (ctx.t / 0x100000000)\r\n    // high 64 bits not supported, offset may not be higher than 2**53-1\r\n\r\n    // last block flag set ?\r\n    if (last) {\r\n        v[28] = ~v[28]\r\n        v[29] = ~v[29]\r\n    }\r\n\r\n    // get little-endian words\r\n    for (i = 0; i < 32; i++) {\r\n        m[i] = B2B_GET32(ctx.b, 4 * i)\r\n    }\r\n\r\n    // twelve rounds of mixing\r\n    // uncomment the DebugPrint calls to log the computation\r\n    // and match the RFC sample documentation\r\n    // util.debugPrint('          m[16]', m, 64)\r\n    for (i = 0; i < 12; i++) {\r\n        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\r\n        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\r\n        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\r\n        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\r\n        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\r\n        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\r\n        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\r\n        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\r\n        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\r\n    }\r\n    // util.debugPrint('   (i=12) v[16]', v, 64)\r\n\r\n    for (i = 0; i < 16; i++) {\r\n        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\r\n    }\r\n    // util.debugPrint('h[8]', ctx.h, 64)\r\n}\r\n\r\n// reusable parameterBlock\r\nconst parameterBlock = new Uint8Array([\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  0: outlen, keylen, fanout, depth\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  4: leaf length, sequential mode\r\n    0,\r\n    0,\r\n    0,\r\n    0, //  8: node offset\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 12: node offset\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 16: node depth, inner length, rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 20: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 24: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 28: rfu\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 32: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 36: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 40: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 44: salt\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 48: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 52: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0, // 56: personal\r\n    0,\r\n    0,\r\n    0,\r\n    0 // 60: personal\r\n])\r\n\r\n// Creates a BLAKE2b hashing context\r\n// Requires an output length between 1 and 64 bytes\r\n// Takes an optional Uint8Array key\r\n// Takes an optinal Uint8Array salt\r\n// Takes an optinal Uint8Array personal\r\nexport function blake2bInit (outlen, key, salt, personal) {\r\n    if (outlen === 0 || outlen > 64) {\r\n        throw new Error('Illegal output length, expected 0 < length <= 64')\r\n    }\r\n    if (key && key.length > 64) {\r\n        throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\r\n    }\r\n    if (salt && salt.length !== 16) {\r\n        throw new Error('Illegal salt, expected Uint8Array with length is 16')\r\n    }\r\n    if (personal && personal.length !== 16) {\r\n        throw new Error('Illegal personal, expected Uint8Array with length is 16')\r\n    }\r\n\r\n    // state, 'param block'\r\n    const ctx = {\r\n        b: new Uint8Array(128),\r\n        h: new Uint32Array(16),\r\n        t: 0, // input count\r\n        c: 0, // pointer within buffer\r\n        outlen: outlen // output length in bytes\r\n    }\r\n\r\n    // initialize parameterBlock before usage\r\n    parameterBlock.fill(0)\r\n    parameterBlock[0] = outlen\r\n    if (key) parameterBlock[1] = key.length\r\n    parameterBlock[2] = 1 // fanout\r\n    parameterBlock[3] = 1 // depth\r\n    if (salt) parameterBlock.set(salt, 32)\r\n    if (personal) parameterBlock.set(personal, 48)\r\n\r\n    // initialize hash state\r\n    for (let i = 0; i < 16; i++) {\r\n        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)\r\n    }\r\n\r\n    // key the hash, if applicable\r\n    if (key) {\r\n        blake2bUpdate(ctx, key)\r\n        // at the end\r\n        ctx.c = 128\r\n    }\r\n\r\n    return ctx\r\n}\r\n\r\n// Updates a BLAKE2b streaming hash\r\n// Requires hash context and Uint8Array (byte array)\r\nexport function blake2bUpdate (ctx, input) {\r\n    for (let i = 0; i < input.length; i++) {\r\n        if (ctx.c === 128) {\r\n            // buffer full ?\r\n            ctx.t += ctx.c // add counters\r\n            blake2bCompress(ctx, false) // compress (not last)\r\n            ctx.c = 0 // counter to zero\r\n        }\r\n        ctx.b[ctx.c++] = input[i]\r\n    }\r\n}\r\n\r\n// Completes a BLAKE2b streaming hash\r\n// Returns a Uint8Array containing the message digest\r\nexport function blake2bFinal (ctx) {\r\n    ctx.t += ctx.c // mark last block offset\r\n\r\n    while (ctx.c < 128) {\r\n        // fill up with zeros\r\n        ctx.b[ctx.c++] = 0\r\n    }\r\n    blake2bCompress(ctx, true) // final block flag = 1\r\n\r\n    // little endian convert and store\r\n    const out = new Uint8Array(ctx.outlen)\r\n    for (let i = 0; i < ctx.outlen; i++) {\r\n        out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\r\n    }\r\n    return out\r\n}\r\n\r\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\r\n//\r\n// Returns a n-byte Uint8Array\r\n//\r\n// Parameters:\r\n// - input - the input bytes, as a string, Buffer or Uint8Array\r\n// - key - optional key Uint8Array, up to 64 bytes\r\n// - outlen - optional output length in bytes, default 64\r\n// - salt - optional salt bytes, string, Buffer or Uint8Array\r\n// - personal - optional personal bytes, string, Buffer or Uint8Array\r\nexport function blake2b (input, key, outlen, salt, personal) {\r\n    // preprocess inputs\r\n    outlen = outlen || 64\r\n    input = util.normalizeInput(input)\r\n    if (salt) {\r\n        salt = util.normalizeInput(salt)\r\n    }\r\n    if (personal) {\r\n        personal = util.normalizeInput(personal)\r\n    }\r\n\r\n    // do the math\r\n    const ctx = blake2bInit(outlen, key, salt, personal)\r\n    blake2bUpdate(ctx, input)\r\n    return blake2bFinal(ctx)\r\n}\r\n","import {timingSafeEqual, randomBytes} from 'crypto'\r\n\r\nconst byteToHex = [];\r\nfor (let n = 0; n <= 0xff; ++n)\r\n{\r\n    const hexOctet = n.toString(16).padStart(2, \"0\");\r\n    byteToHex.push(hexOctet);\r\n}\r\n\r\nconst b64u_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\r\nconst b64u_lookup = new Uint8Array(256);\r\nfor (let i = 0; i < b64u_chars.length; i++) {\r\n    b64u_lookup[b64u_chars.charCodeAt(i)] = i\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} base64\r\n * @param {boolean} as_uint8array\r\n * @returns {string|Uint8Array}\r\n */\r\nexport function b64u_dec(base64, as_uint8array = false) {\r\n    let bufferLength = base64.length * 0.75,\r\n        len = base64.length, i, p = 0,\r\n        encoded1, encoded2, encoded3, encoded4;\r\n\r\n    const bytes = new Uint8Array(bufferLength)\r\n    for (i = 0; i < len; i+=4) {\r\n        encoded1 = b64u_lookup[base64.charCodeAt(i)]\r\n        encoded2 = b64u_lookup[base64.charCodeAt(i+1)]\r\n        encoded3 = b64u_lookup[base64.charCodeAt(i+2)]\r\n        encoded4 = b64u_lookup[base64.charCodeAt(i+3)]\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\r\n    }\r\n    if (as_uint8array) {\r\n        return bytes\r\n    }\r\n    return (new TextDecoder()).decode(bytes)\r\n}\r\n\r\n/**\r\n *\r\n * @ref https://stackoverflow.com/q/12710001\r\n * @param {Uint8Array} bytes\r\n * @returns {string}\r\n */\r\nexport function b64u_enc(bytes) {\r\n    let i, len = bytes.length, base64 = \"\";\r\n    for (i = 0; i < len; i+=3) {\r\n        base64 += b64u_chars[bytes[i] >> 2];\r\n        base64 += b64u_chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += b64u_chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += b64u_chars[bytes[i + 2] & 63];\r\n    }\r\n    if ((len % 3) === 2) {\r\n        return base64.substring(0, base64.length - 1);\r\n    } else if (len % 3 === 1) {\r\n        return base64.substring(0, base64.length - 2);\r\n    }\r\n    return base64\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} mixed\r\n * @returns {string}\r\n */\r\nexport function from_u8(mixed) {\r\n    if (typeof mixed === 'string') {\r\n        return mixed\r\n    } else if (mixed instanceof Uint8Array) {\r\n        return (new TextDecoder()).decode(mixed)\r\n    }\r\n    throw new Error(`Unsupported type: ${typeof mixed}`)\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} hexString\r\n * @returns {Uint8Array}\r\n */\r\nexport function hex_to_u8(hexString) {\r\n    if (hexString.length === 0) {\r\n        return new Uint8Array([])\r\n    }\r\n    if ((hexString.length & 1) === 1) {\r\n        hexString = '0' + hexString\r\n    }\r\n    const buf = new Uint8Array(hexString.length >>> 1)\r\n    for (let i = 0, j = 0; i < hexString.length; i += 2, j++) {\r\n        buf[j] = parseInt(hexString.slice(i, i + 2), 16)\r\n    }\r\n    return buf\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} num\r\n * @returns {Uint8Array}\r\n */\r\nexport function le32(num) {\r\n    needs(Number.isSafeInteger(num), 'Number too large for JavaScript to safely process')\r\n    const low =  (num & 0xffffffff)\r\n    const out = new Uint8Array(4)\r\n    out[0] =  low          & 0xff\r\n    out[1] =  (low >>>  8) & 0xff\r\n    out[2] =  (low >>> 16) & 0xff\r\n    out[3] =  (low >>> 24) & 0xff\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} num\r\n * @returns {Uint8Array}\r\n */\r\nexport function le64(num) {\r\n    needs(Number.isSafeInteger(num), 'Number too large for JavaScript to safely process')\r\n\r\n    const high = (num / 0x100000000)|0\r\n    const low =  (num & 0x0ffffffff)\r\n    const out = new Uint8Array(8)\r\n    out[0] =  low          & 0xff\r\n    out[1] =  (low >>>  8) & 0xff\r\n    out[2] =  (low >>> 16) & 0xff\r\n    out[3] =  (low >>> 24) & 0xff\r\n    out[4] = high          & 0xff\r\n    out[5] = (high >>>  8) & 0xff\r\n    out[6] = (high >>> 16) & 0xff\r\n    out[7] = (high >>> 24) & 0xff\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} buf\r\n * @returns {number}\r\n */\r\nexport function load32le(buf) {\r\n    return buf[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} ctx\r\n * @param {number} offset\r\n * @returns {number}\r\n */\r\nexport function readInt32BE(ctx, offset) {\r\n    return load32le(ctx.slice(offset, offset + 4))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} output\r\n * @param {number} num\r\n * @param {number} start\r\n * @returns {*}\r\n */\r\nexport function write32le(output, num, start) {\r\n    if (start >= output.length)\r\n        return output;\r\n    output[start    ] = (num         & 0xff)\r\n    if (start + 1 >= output.length)\r\n        return output;\r\n    output[start + 1] = ((num >>>  8) & 0xff)\r\n    if (start + 2 >= output.length)\r\n        return output;\r\n    output[start + 2] = ((num >>> 16) & 0xff)\r\n    if (start + 3 >= output.length)\r\n        return output;\r\n    output[start + 3] = ((num >>> 24) & 0xff)\r\n    return output\r\n}\r\n\r\n/**\r\n *\r\n * @param {boolean} condition\r\n * @param {string} message\r\n */\r\nexport function needs(condition, message= 'An unknown error occurred') {\r\n    if (!condition) throw new Error(message)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array|string} pieces\r\n * @returns {Uint8Array}\r\n * @constructor\r\n */\r\nexport function PAE(...pieces) {\r\n    let out = le64(pieces.length)\r\n    for (let piece of pieces) {\r\n        let p = to_u8(piece)\r\n        needs(p instanceof Uint8Array, 'Only string and Uint8Array is allowed')\r\n        let len = le64(p.length)\r\n        out = new Uint8Array([ ...out, ...len, ...p ])\r\n    }\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number }num\r\n * @returns {Uint8Array}\r\n */\r\nexport function random_bytes(num = 0) {\r\n    const buf = new Uint8Array(num)\r\n    if (typeof window !== 'undefined') {\r\n        if (window.crypto && window.crypto.getRandomValues) {\r\n            window.crypto.getRandomValues(buf)\r\n            return buf\r\n        }\r\n        if (typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'export function') {\r\n            window.msCrypto.getRandomValues(buf)\r\n            return buf\r\n        }\r\n    }\r\n    if (randomBytes) {\r\n        const rand = randomBytes(num)\r\n        buf.set(rand, 0)\r\n        return buf\r\n    }\r\n    throw new Error('No secure random number generator available')\r\n}\r\n\r\n/**\r\n *\r\n * @param {string|number|Uint8Array} mixed\r\n * @param {boolean} tolerate_integers\r\n * @returns {Uint8Array}\r\n */\r\nexport function to_u8(mixed, tolerate_integers = false) {\r\n    if (mixed instanceof Uint8Array) {\r\n        return mixed\r\n    } else if (typeof mixed === 'string') {\r\n        return (new TextEncoder()).encode(mixed)\r\n    } else if (mixed instanceof Number && tolerate_integers) {\r\n        return le64(mixed)\r\n    }\r\n    throw new Error(`Unsupported type: ${typeof mixed}`)\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} arrs\r\n * @returns {Uint8Array}\r\n */\r\nexport function u8_concat(...arrs) {\r\n    let len = 0\r\n    for (const arr of arrs) {\r\n        if (arr.length)\r\n            len += arr.length\r\n    }\r\n    const u8 = new Uint8Array(len)\r\n    let start = 0\r\n    for (const arr of arrs) {\r\n        u8.set(arr, start)\r\n        start += arr.length\r\n    }\r\n    return u8\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} a\r\n * @param {Uint8Array} b\r\n * @returns {boolean}\r\n */\r\nexport function u8_equal(a, b) {\r\n    if (typeof timingSafeEqual === 'undefined') {\r\n        needs(a instanceof Uint8Array, 'Must be Uint8Array')\r\n        needs(b instanceof Uint8Array, 'Must be Uint8Array')\r\n        if (a.length !== b.length) {\r\n            return false\r\n        }\r\n        let d = 0\r\n        for (let i = 0; i < a.length; i++) {\r\n            d |= (a[i] ^ b[i])\r\n        }\r\n        return d === 0\r\n    }\r\n    return timingSafeEqual(to_u8(a), to_u8(b))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} uint8arr\r\n * @returns {string}\r\n */\r\nexport function u8_to_hex(uint8arr) {\r\n    const output = []\r\n    for (let i = 0; i < uint8arr.length; i++) {\r\n        output.push(byteToHex[uint8arr[i]])\r\n    }\r\n    return output.join('')\r\n}\r\n","import { le32, le64, needs, load32le, readInt32BE, write32le } from './util.js'\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n */\r\nfunction add(a, b)\r\n{\r\n    return ((a + b) & 0xffffffff) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} v\r\n * @param {number} n\r\n * @returns {number}\r\n */\r\nfunction rotate(v, n)\r\n{\r\n    v &= 0xffffffff;\r\n    n &= 31;\r\n    return (\r\n        (\r\n            (v << n) | (v >>> (32 - n))\r\n        )\r\n    ) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n */\r\nfunction xor(a, b)\r\n{\r\n    return ((a ^ b) & 0xffffffff) >>> 0;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} c\r\n * @param {number} d\r\n * @returns {number[]}\r\n */\r\nexport function quarterRound(a, b, c, d)\r\n{\r\n    // a = PLUS(a,b); d = ROTATE(XOR(d,a),16);\r\n    a = (a + b) & 0xffffffff;\r\n    d = rotate(d ^ a, 16);\r\n\r\n    // c = PLUS(c,d); b = ROTATE(XOR(b,c),12);\r\n    c = (c + d) & 0xffffffff;\r\n    b = rotate(b ^ c, 12);\r\n\r\n    // a = PLUS(a,b); d = ROTATE(XOR(d,a), 8);\r\n    a = (a + b) & 0xffffffff;\r\n    d = rotate(d ^ a, 8);\r\n\r\n    // c = PLUS(c,d); b = ROTATE(XOR(b,c), 7);\r\n    c = (c + d) & 0xffffffff;\r\n    b = rotate(b ^ c, 7);\r\n    return [a >>> 0, b >>> 0, c >>> 0, d >>> 0];\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nfunction chachaCtx(key, nonce, counter = 0) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 8, 'Invalid nonce length')\r\n    counter = le64(counter)\r\n    return new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...counter, ...nonce]))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nfunction chachaIetfCtx(key, nonce, counter = 0) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 12, 'Invalid nonce length')\r\n    counter = le32(counter)\r\n    return new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...counter, ...nonce]))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} ctx\r\n * @param {Uint8Array} message\r\n * @returns {Uint8Array}\r\n */\r\nexport function chacha20(ctx, message)\r\n{\r\n    let j0 = readInt32BE(ctx, 0)\r\n    let j1 = readInt32BE(ctx, 1 << 2)\r\n    let j2 = readInt32BE(ctx, 2 << 2)\r\n    let j3 = readInt32BE(ctx, 3 << 2)\r\n    let j4 = readInt32BE(ctx, 4 << 2)\r\n    let j5 = readInt32BE(ctx, 5 << 2)\r\n    let j6 = readInt32BE(ctx, 6 << 2)\r\n    let j7 = readInt32BE(ctx, 7 << 2)\r\n    let j8 = readInt32BE(ctx, 8 << 2)\r\n    let j9 = readInt32BE(ctx, 9 << 2)\r\n    let j10 = readInt32BE(ctx, 10 << 2)\r\n    let j11 = readInt32BE(ctx, 11 << 2)\r\n    let j12 = readInt32BE(ctx, 12 << 2)\r\n    let j13 = readInt32BE(ctx, 13 << 2)\r\n    let j14 = readInt32BE(ctx, 14 << 2)\r\n    let j15 = readInt32BE(ctx, 15 << 2)\r\n\r\n    let x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\r\n\r\n    let start = 0;\r\n    let end;\r\n    let len = message.length;\r\n    let cipher = new Uint8Array(len);\r\n    let chunk = new Uint8Array(64);\r\n\r\n    while (start < len) {\r\n        end = start + 64 >= len\r\n            ? len\r\n            : start + 64\r\n        chunk.fill(0, 0)\r\n        let j = 0\r\n        for (let i = start; i < end; i++) {\r\n            chunk[j++] = message[i]\r\n        }\r\n\r\n        x0 =   j0;   x1 = j1;   x2 = j2;   x3 = j3;\r\n        x4 =   j4;   x5 = j5;   x6 = j6;   x7 = j7;\r\n        x8 =   j8;   x9 = j9; x10 = j10; x11 = j11;\r\n        x12 = j12; x13 = j13; x14 = j14; x15 = j15;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            [x0, x4, x8, x12] = quarterRound(x0, x4, x8, x12);\r\n            [x1, x5, x9, x13] = quarterRound(x1, x5, x9, x13);\r\n            [x2, x6, x10, x14] = quarterRound(x2, x6, x10, x14);\r\n            [x3, x7, x11, x15] = quarterRound(x3, x7, x11, x15);\r\n\r\n            [x0, x5, x10, x15] = quarterRound(x0, x5, x10, x15);\r\n            [x1, x6, x11, x12] = quarterRound(x1, x6, x11, x12);\r\n            [x2, x7, x8, x13] = quarterRound(x2, x7, x8, x13);\r\n            [x3, x4, x9, x14] = quarterRound(x3, x4, x9, x14)\r\n        }\r\n        x0 = add(x0, j0)\r\n        x1 = add(x1, j1)\r\n        x2 = add(x2, j2)\r\n        x3 = add(x3, j3)\r\n        x4 = add(x4, j4)\r\n        x5 = add(x5, j5)\r\n        x6 = add(x6, j6)\r\n        x7 = add(x7, j7)\r\n        x8 = add(x8, j8)\r\n        x9 = add(x9, j9)\r\n        x10 = add(x10, j10)\r\n        x11 = add(x11, j11)\r\n        x12 = add(x12, j12)\r\n        x13 = add(x13, j13)\r\n        x14 = add(x14, j14)\r\n        x15 = add(x15, j15)\r\n\r\n        x0 = xor(x0, load32le(chunk.slice(0, 4)))\r\n        x1 = xor(x1, load32le(chunk.slice(4, 8)))\r\n        x2 = xor(x2, load32le(chunk.slice(8, 12)))\r\n        x3 = xor(x3, load32le(chunk.slice(12, 16)))\r\n        x4 = xor(x4, load32le(chunk.slice(16, 20)))\r\n        x5 = xor(x5, load32le(chunk.slice(20, 24)))\r\n        x6 = xor(x6, load32le(chunk.slice(24, 28)))\r\n        x7 = xor(x7, load32le(chunk.slice(28, 32)))\r\n        x8 = xor(x8, load32le(chunk.slice(32, 36)))\r\n        x9 = xor(x9, load32le(chunk.slice(36, 40)))\r\n        x10 = xor(x10, load32le(chunk.slice(40, 44)))\r\n        x11 = xor(x11, load32le(chunk.slice(44, 48)))\r\n        x12 = xor(x12, load32le(chunk.slice(48, 52)))\r\n        x13 = xor(x13, load32le(chunk.slice(52, 56)))\r\n        x14 = xor(x14, load32le(chunk.slice(56, 60)))\r\n        x15 = xor(x15, load32le(chunk.slice(60, 64)))\r\n\r\n        cipher = write32le(cipher, x0, start)\r\n        cipher = write32le(cipher, x1, start + 4)\r\n        cipher = write32le(cipher, x2, start + 8)\r\n        cipher = write32le(cipher, x3, start + 12)\r\n        cipher = write32le(cipher, x4, start + 16)\r\n        cipher = write32le(cipher, x5, start + 20)\r\n        cipher = write32le(cipher, x6, start + 24)\r\n        cipher = write32le(cipher, x7, start + 28)\r\n        cipher = write32le(cipher, x8, start + 32)\r\n        cipher = write32le(cipher, x9, start + 36)\r\n        cipher = write32le(cipher, x10, start + 40)\r\n        cipher = write32le(cipher, x11, start + 44)\r\n        cipher = write32le(cipher, x12, start + 48)\r\n        cipher = write32le(cipher, x13, start + 52)\r\n        cipher = write32le(cipher, x14, start + 56)\r\n        cipher = write32le(cipher, x15, start + 60)\r\n\r\n        j12++;\r\n        start += 64;\r\n    }\r\n    return cipher.slice(0, len);\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} len\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function stream(len, nonce, key, counter = 1) {\r\n    needs(len >= 0, 'Length cannot be negative')\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 8, 'Nonce must be 8 bytes')\r\n    return chacha20(chachaCtx(key, nonce, counter), new Uint8Array(len))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function streamXorIc(message, nonce, key, counter) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 8, 'Nonce must be 8 bytes')\r\n    return chacha20(chachaCtx(key, nonce, counter), message)\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} len\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStream(len, nonce, key, counter = 1) {\r\n    needs(len >= 0, 'Length cannot be negative')\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 12, 'Nonce must be 12 bytes')\r\n    return chacha20(chachaIetfCtx(key, nonce, counter), new Uint8Array(len))\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStreamXorIc(message, nonce, key, counter) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 12, 'Nonce must be 12 bytes')\r\n    return chacha20(chachaIetfCtx(key, nonce, counter), message)\r\n}\r\n","import { needs, readInt32BE, write32le } from './util.js'\r\nimport * as chacha from './chacha.js'\r\n\r\nfunction hchachaCtx(key, nonce) {\r\n    needs(key.length === 32, 'Invalid key size')\r\n    needs(nonce.length === 16, 'Invalid nonce length')\r\n    return (new Uint8Array([\r\n        0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,\r\n        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b,\r\n    ].concat([...key, ...nonce])))\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @returns {Uint8Array}\r\n */\r\nexport function hchacha20(nonce, key) {\r\n    const ctx = hchachaCtx(key, nonce)\r\n    let x0 = readInt32BE(ctx, 0)\r\n    let x1 = readInt32BE(ctx, 1 << 2)\r\n    let x2 = readInt32BE(ctx, 2 << 2)\r\n    let x3 = readInt32BE(ctx, 3 << 2)\r\n    let x4 = readInt32BE(ctx, 4 << 2)\r\n    let x5 = readInt32BE(ctx, 5 << 2)\r\n    let x6 = readInt32BE(ctx, 6 << 2)\r\n    let x7 = readInt32BE(ctx, 7 << 2)\r\n    let x8 = readInt32BE(ctx, 8 << 2)\r\n    let x9 = readInt32BE(ctx, 9 << 2)\r\n    let x10 = readInt32BE(ctx, 10 << 2)\r\n    let x11 = readInt32BE(ctx, 11 << 2)\r\n    let x12 = readInt32BE(ctx, 12 << 2)\r\n    let x13 = readInt32BE(ctx, 13 << 2)\r\n    let x14 = readInt32BE(ctx, 14 << 2)\r\n    let x15 = readInt32BE(ctx, 15 << 2)\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        [x0, x4, x8, x12] = chacha.quarterRound(x0, x4, x8, x12);\r\n        [x1, x5, x9, x13] = chacha.quarterRound(x1, x5, x9, x13);\r\n        [x2, x6, x10, x14] = chacha.quarterRound(x2, x6, x10, x14);\r\n        [x3, x7, x11, x15] = chacha.quarterRound(x3, x7, x11, x15);\r\n\r\n        [x0, x5, x10, x15] = chacha.quarterRound(x0, x5, x10, x15);\r\n        [x1, x6, x11, x12] = chacha.quarterRound(x1, x6, x11, x12);\r\n        [x2, x7, x8, x13] = chacha.quarterRound(x2, x7, x8, x13);\r\n        [x3, x4, x9, x14] = chacha.quarterRound(x3, x4, x9, x14);\r\n    }\r\n\r\n    const out = new Uint8Array(32)\r\n    write32le(out, x0, 0)\r\n    write32le(out, x1, 1 << 2)\r\n    write32le(out, x2, 2 << 2)\r\n    write32le(out, x3, 3 << 2)\r\n    write32le(out, x12, 4 << 2)\r\n    write32le(out, x13, 5 << 2)\r\n    write32le(out, x14, 6 << 2)\r\n    write32le(out, x15, 7 << 2)\r\n    return out\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} length\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function stream(length, key, nonce, counter = 1) {\r\n    let outnonce = new nonce.slice(16, 24)\r\n    return chacha.stream(\r\n        length,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function streamXorIc(message, nonce, key, counter = 1) {\r\n    needs(key.length === 32, 'Key must be 32 bytes')\r\n    needs(nonce.length === 24, 'Nonce must be 32 bytes')\r\n    let outnonce = new nonce.slice(16, 24)\r\n    return chacha.streamXorIc(\r\n        message,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} length\r\n * @param {Uint8Array} key\r\n * @param {Uint8Array} nonce\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStream(length, key, nonce, counter = 1) {\r\n    let outnonce = new Uint8Array(12)\r\n    outnonce.set(nonce.slice(16, 24), 0)\r\n    return chacha.ietfStream(\r\n        length,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} message\r\n * @param {Uint8Array} nonce\r\n * @param {Uint8Array} key\r\n * @param {number} counter\r\n * @returns {Uint8Array}\r\n */\r\nexport function ietfStreamXorIc(message, nonce, key, counter = 1) {\r\n    needs(key.length === 32, `Key must be 32 bytes; ${key.length} provided`)\r\n    needs(nonce.length === 24, 'Nonce must be 24 bytes')\r\n    const outnonce = new Uint8Array(12)\r\n    outnonce.set(nonce.slice(16, 24), 4)\r\n    return chacha.ietfStreamXorIc(\r\n        message,\r\n        outnonce,\r\n        hchacha20(nonce.slice(0, 16), key),\r\n        counter\r\n    )\r\n}\r\n\r\nexport function encrypt(message, nonce, key, counter = 1) {\r\n    return ietfStreamXorIc(message, nonce, key, counter)\r\n}\r\n\r\nexport function decrypt(message, nonce, key, counter = 1) {\r\n    return ietfStreamXorIc(message, nonce, key, counter)\r\n}\r\n","import { blake2bInit, blake2bUpdate, blake2bFinal } from './blakejs/blake2b.js'\r\nimport { ietfStreamXorIc as xchacha20 } from './xchacha.js'\r\nimport { b64u_dec, b64u_enc, from_u8, needs, PAE, random_bytes, to_u8, u8_concat, u8_equal } from './util.js'\r\n\r\nconst V4_LOCAL = 'v4.local.'\r\n\r\nconst encoder = new TextEncoder()\r\nconst V4_LOCAL_U8 = encoder.encode(V4_LOCAL)\r\nconst PASETO_V4_ENC_KEY = encoder.encode('paseto-encryption-key')\r\nconst PASETO_V4_AUTH_KEY = encoder.encode('paseto-auth-key-for-aead')\r\n\r\nexport class PasetoV4Local\r\n{\r\n    constructor(bytes) {\r\n        needs(bytes instanceof Uint8Array, \"Input must be a Uint8Array\")\r\n        needs(bytes.length === 32, \"Key must be 32 bytes\")\r\n        this.bytes = bytes\r\n    }\r\n\r\n    /**\r\n     * @returns {PasetoV4Local}\r\n     */\r\n    static generate() {\r\n        const random = random_bytes(32)\r\n        return new PasetoV4Local(random)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {string} implicit\r\n     * @returns {Promise<object>}\r\n     */\r\n    async decode(token, implicit = '') {\r\n        return JSON.parse(await this.decrypt(token, implicit))\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string|object} claims\r\n     * @param {string|object} footer\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async encode(claims, footer = '', implicit = '') {\r\n        if (typeof footer === 'object') {\r\n            footer = JSON.stringify(footer)\r\n        }\r\n        if (typeof footer === 'string') {\r\n            footer = to_u8(footer)\r\n        }\r\n        return this.encrypt(JSON.stringify(claims), footer, implicit)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {Uint8Array} expected\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async assertFooter(token, expected) {\r\n        const pieces = token.split('.')\r\n        needs(pieces.length === 4, \"No footer provided\")\r\n        const stored = b64u_dec(pieces[3], expected instanceof Uint8Array)\r\n        return u8_equal(stored, expected)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {boolean} as_object\r\n     * @returns {string|Uint8Array|object}\r\n     */\r\n    static getFooter(token, as_object = false) {\r\n        const pieces = token.split('.')\r\n        needs(pieces.length === 4, \"No footer provided\")\r\n        const stored = b64u_dec(pieces[3], as_object)\r\n        if (as_object) {\r\n            return JSON.parse(from_u8(stored))\r\n        }\r\n        return stored\r\n    }\r\n\r\n    /**\r\n     * @returns {Uint8Array}\r\n     */\r\n    getKey() {\r\n        return this.bytes\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {Uint8Array} footer\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async encrypt(message, footer = '', implicit = '') {\r\n        const n = random_bytes(32)\r\n        let state\r\n\r\n        state = blake2bInit(56, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_ENC_KEY)\r\n        blake2bUpdate(state, n)\r\n        const tmp = blake2bFinal(state)\r\n        const Ek = tmp.slice(0, 32)\r\n        const n2 = tmp.slice(32)\r\n\r\n        state = blake2bInit(32, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_AUTH_KEY)\r\n        blake2bUpdate(state, n)\r\n        const Ak = blake2bFinal(state)\r\n\r\n        const c = await xchacha20(to_u8(message), n2, Ek, 0)\r\n\r\n        state = blake2bInit(32, Ak)\r\n        blake2bUpdate(state, PAE(V4_LOCAL_U8, n, c, footer, implicit))\r\n        const t = blake2bFinal(state)\r\n\r\n        const payload = b64u_enc(u8_concat(n, c, t))\r\n        if (footer.length > 0) {\r\n            return [V4_LOCAL.slice(0, 8), payload, b64u_enc(footer)].join('.')\r\n        }\r\n        return [V4_LOCAL.slice(0, 8), payload].join('.')\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} token\r\n     * @param {string} implicit\r\n     * @returns {Promise<string>}\r\n     */\r\n    async decrypt(token, implicit = '') {\r\n        const {n, c, t, footer} = await this.decompose(token)\r\n        let state\r\n\r\n        state = blake2bInit(56, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_ENC_KEY)\r\n        blake2bUpdate(state, n)\r\n        const tmp = blake2bFinal(state)\r\n        const Ek = tmp.slice(0, 32)\r\n        const n2 = tmp.slice(32)\r\n\r\n        state = blake2bInit(32, this.bytes)\r\n        blake2bUpdate(state, PASETO_V4_AUTH_KEY)\r\n        blake2bUpdate(state, n)\r\n        const Ak = blake2bFinal(state)\r\n\r\n        state = blake2bInit(32, Ak)\r\n        blake2bUpdate(state, PAE(V4_LOCAL_U8, n, c, footer, implicit))\r\n        const t2 = blake2bFinal(state)\r\n\r\n        needs(u8_equal(t, t2), 'Invalid tag')\r\n        const pt = await xchacha20(c, n2, Ek, 0)\r\n        return (new TextDecoder()).decode(pt)\r\n    }\r\n\r\n    /**\r\n     * @param {string} token\r\n     * @returns {Promise<{epk: Uint8Array, tag: Uint8Array, edk: Uint8Array, footer: Uint8Array}>}\r\n     */\r\n    async decompose(token) {\r\n        const header = to_u8(token.slice(0, 9))\r\n        needs(u8_equal(header, V4_LOCAL_U8), 'Invalid token')\r\n        const tokenPieces = token.split('.')\r\n        const payload = b64u_dec(tokenPieces[2], true)\r\n        const l = payload.length\r\n        return {\r\n            n: payload.slice(0, 32),\r\n            c: payload.slice(32, l - 32),\r\n            t: payload.slice(l - 32),\r\n            footer: tokenPieces.length > 3\r\n                ? b64u_dec(tokenPieces[3])\r\n                : new Uint8Array(0)\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.PasetoV4Local = PasetoV4Local\r\n}\r\n"],"names":["g","f","exports","module","require","define","amd","globalThis","self","paseto","v4","local","crypto","this","ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA82","Uint8Array","map","x","blake2bCompress","ctx","last","h","t","parameterBlock","blake2bInit","outlen","key","salt","personal","Error","length","fill","set","blake2bUpdate","input","blake2bFinal","out","n","toString","padStart","b64u_chars","b64u_lookup","charCodeAt","b64u_dec","base64","as_uint8array","encoded1","encoded2","encoded3","encoded4","bufferLength","len","p","bytes","TextDecoder","decode","b64u_enc","substring","le64","num","needs","Number","isSafeInteger","high","low","load32le","buf","readInt32BE","offset","slice","write32le","output","start","condition","message","PAE","pieces","piece","to_u8","random_bytes","window","getRandomValues","msCrypto","randomBytes","rand","mixed","tolerate_integers","TextEncoder","encode","u8_equal","timingSafeEqual","add","rotate","xor","quarterRound","chachaIetfCtx","nonce","counter","le32","concat","ietfStreamXorIc","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","end","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","cipher","chunk","j","chacha20","hchacha20","hchachaCtx","chacha.quarterRound","outnonce","chacha.ietfStreamXorIc","V4_LOCAL","encoder","V4_LOCAL_U8","PASETO_V4_ENC_KEY","PASETO_V4_AUTH_KEY","PasetoV4Local","constructor","static","random","async","token","implicit","JSON","parse","decrypt","claims","footer","stringify","encrypt","expected","split","as_object","stored","from_u8","getKey","state","tmp","Ek","n2","Ak","xchacha20","payload","arrs","u8","u8_concat","join","decompose","pt","tokenPieces","l","Object","defineProperty","value"],"mappings":"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"}